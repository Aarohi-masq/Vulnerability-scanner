from tkinter import *
from tkinter import filedialog
from tkinter import messagebox
from textwrap import wrap
import tqdm
import requests
from bs4 import BeautifulSoup as bs
from urllib.parse import urljoin
from pprint import pprint
import webbrowser
def XSS():

        global top_s
        top_s=Toplevel()
        top_s.title("Cross-Site Scripting Window")
        top_s.geometry("1199x600+100+50")
        
        # canvas
        canvas_s = Canvas(top_s, height=500, width=400)
        canvas_s.pack(fill="both", expand=True)
        canvas_s.create_image(0, 0, image=bg_xss, anchor="nw")

        # XSS widget
        Frame_xss = Frame(top_s, bg="white")
        Frame_xss.place(x=250, y=50, height=300, width=700)
        title = Label(Frame_xss, text="Cross-Site Scripting", font=("Segoe Script", 32, "bold"), fg="#5eabf7",bg="white").place(x=140, y=10)

        # URL
        label_url = Label(Frame_xss, text="Enter URL", font=("PMingLiU-ExtB", 15, "bold"), fg="#4d647a", bg="white").place(x=40,y=120)
        global txt_url
        txt_url = Entry(Frame_xss, font=("Times new roman", 12), bg="lightgray")
        txt_url.place(x=40, y=150, width=350, height=30)

        # XSS button
        XSS_btn = Button(top_s, command=xss_function, cursor="hand2", text="Scan", fg="white",bg="#5eabf7", font=("Book Antiqua", 20)).place(x=510, y=270, width=180, height=40)

        #Info_XSS button
        Info_XSS_btn= Button(top_s, command=open_urlx, cursor="hand2", text="More Info.", fg="white",bg="#5eabf7", font=("Book Antiqua", 12)).place(x = 650, y= 200, width=80, height=30)
        
        # Destroy button
        d_button = Button(top_s, text="<- Go Back", command=top_s.destroy, cursor="hand2", fg="white", bg="#5eabf7",font=("Book Antiqua", 10)).place(x=20, y=20, width=80, height=30)

def open_urlx():
    webbrowser.open_new_tab("https://portswigger.net/web-security/cross-site-scripting")

def xss_function():
    if txt_url.get() == "":
        messagebox.showerror("Error", "Please enter the URL", parent=top_s)
    else:
        messagebox.showinfo("Detecting...", "Searching for XSS vulnerability", parent=top_s)
        url=txt_url.get()
        scan_xss(url)
        

def get_all_forms(url):
    """Given a `url`, it returns all forms from the HTML content"""
    soup = bs(requests.get(url).content, "html.parser")
    return soup.find_all("form")
def get_form_details(form):
    """
    This function extracts all possible useful information about an HTML `form`
    """
    details = {}
    # get the form action (target url)
    action = form.attrs.get("action").lower()
    # get the form method (POST, GET, etc.)
    method = form.attrs.get("method", "get").lower()
    # get all the input details such as type and name
    inputs = []
    for input_tag in form.find_all("input"):
        input_type = input_tag.attrs.get("type", "text")
        input_name = input_tag.attrs.get("name")
        inputs.append({"type": input_type, "name": input_name})
    # put everything to the resulting dictionary
    details["action"] = action
    details["method"] = method
    details["inputs"] = inputs
    return details
def submit_form(form_details, url, value):
    """
    Submits a form given in `form_details`
    Params:
        form_details (list): a dictionary that contain form information
        url (str): the original URL that contain that form
        value (str): this will be replaced to all text and search inputs
    Returns the HTTP Response after form submission
    """
    # construct the full URL (if the url provided in action is relative)
    target_url = urljoin(url, form_details["action"])
    # get the inputs
    inputs = form_details["inputs"]
    data = {}
    for input in inputs:
        # replace all text and search values with `value`
        if input["type"] == "text" or input["type"] == "search":
            input["value"] = value
        input_name = input.get("name")
        input_value = input.get("value")
        if input_name and input_value:
            # if input name and value are not None, 
            # then add them to the data of form submission
            data[input_name] = input_value

    if form_details["method"] == "post":
        return requests.post(target_url, data=data)
    else:
        # GET request
        return requests.get(target_url, params=data)
def scan_xss(url):
    """
    Given a `url`, it prints all XSS vulnerable forms and 
    returns True if any is vulnerable, False otherwise
    """
    # get all the forms from the URL
    forms = get_all_forms(url)
    print(f"[+] Detected {len(forms)} forms on {url}.")
    if (len(forms)==0):
        messagebox.showinfo("Detected", "[+] Detected "+ str(len(forms))+" forms on "+url, parent=top_s)
    js_script = "<Script>alert('hi')</scripT>"
    # returning value
    is_vulnerable = False
    # iterate over all forms
    for form in forms:
        form_details = get_form_details(form)
        content = submit_form(form_details, url, js_script).content.decode()
        if js_script in content:
            print(f"[+] XSS Detected on {url}")
            print(f"[*] Form details:")
            messagebox.showinfo("Detected", "[+] Detected "+ str(len(forms))+" forms on "+url+"\n[+] XSS Detected on "+url+"\n[*] Form details:\n"+str(form_details), parent=top_s)
            pprint(form_details)
            is_vulnerable = True
            # won't break because we want to print available vulnerable forms
    #label_output.config(text=is_vulnerable)
    return is_vulnerable
        
def SQL():

    global top
    top=Toplevel()
    top.title("SQL Injection Window")
    top.geometry("1199x600+100+50")

    canvas = Canvas(top, height=500, width=400)
    canvas.pack(fill="both",expand=True)
    canvas.create_image(0,0,image=bg_login,anchor="nw")

    # SQL widget
    Frame_sql = Frame(top, bg="white")
    Frame_sql.place(x=250, y=50, height=300, width=700)
    title = Label(Frame_sql, text="SQL Injection", font=("Segoe Script", 35, "bold"), fg="#53a2bd",bg="white").place(x=200, y=10)

    # Username
    uurl = Label(Frame_sql, text="Enter URL", font=("PMingLiU-ExtB", 15, "bold"), fg="#4d647a", bg="white").place(x=40,y=120)
    global s_txt_url
    s_txt_url = Entry(Frame_sql, font=("Times new roman", 12), bg="lightgray")
    s_txt_url.place(x=40, y=150, width=350, height=30)

    # Login button
    SQL_btn = Button(top, command=sql_function, cursor="hand2", text="Scan", fg="white",bg="#53a2bd", font=("Book Antiqua", 20)).place(x=510, y=270, width=180, height=40)

    #Info_XSS button
    Info_XSS_btn= Button(top, command=open_urls, cursor="hand2", text="More Info.", fg="white",bg="#53a2bd", font=("Book Antiqua", 12)).place(x = 650, y= 200, width=80, height=30)
        
    #Destroy button
    d_button = Button(top, text="<- Go Back", command=top.destroy,cursor="hand2",fg="white",bg="#53a2bd", font=("Book Antiqua", 10)).place(x=20, y=20, width=80, height=30)

def open_urls():
    webbrowser.open_new_tab("https://portswigger.net/web-security/sql-injection")
def sql_function():

    if s_txt_url.get() == "":
        messagebox.showerror("Error", "Please Enter URL", parent=top)
    else:
        messagebox.showinfo("Detecting...", "Searching for SQL vulnerability", parent=top)
        url=s_txt_url.get()
        global s
        s = requests.Session()
        s.headers["User-Agent"] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Safari/537.36"
        scan_sql_injection(url)
        

def s_get_all_forms(url):
    """Given a `url`, it returns all forms from the HTML content"""
    soup = bs(s.get(url).content, "html.parser")
    return soup.find_all("form")


def s_get_form_details(form):
    """
    This function extracts all possible useful information about an HTML `form`
    """
    details = {}
    # get the form action (target url)
    try:
        action = form.attrs.get("action").lower()
    except:
        action = None
    # get the form method (POST, GET, etc.)
    method = form.attrs.get("method", "get").lower()
    # get all the input details such as type and name
    inputs = []
    for input_tag in form.find_all("input"):
        input_type = input_tag.attrs.get("type", "text")
        input_name = input_tag.attrs.get("name")
        input_value = input_tag.attrs.get("value", "")
        inputs.append({"type": input_type, "name": input_name, "value": input_value})
    # put everything to the resulting dictionary
    details["action"] = action
    details["method"] = method
    details["inputs"] = inputs
    return details
def s_is_vulnerable(response):
    """A simple boolean function that determines whether a page is SQL Injection vulnerable from its `response`"""
    errors = {
    # MySQL
    "you have an error in your sql syntax;",
    "warning: mysql",
    # SQL Server
    "unclosed quotation mark after the character string",
    # Oracle
    "quoted string not properly terminated",
    }
    for error in errors:
    # if you find one of these errors, return True
        if error in response.content.decode().lower():
            return True
    # no error detected
    return False
def scan_sql_injection(url):
    # test on URL
    for c in "\"'":
        # add quote/double quote character to the URL
        new_url = f"{url}{c}"
        print("[!] Trying", new_url)
        #messagebox.showinfo("Detected", "[!] Trying "+ new_url, parent=top)
        # make the HTTP request
        res = s.get(new_url)
        if s_is_vulnerable(res):
            # SQL Injection detected on the URL itself, 
            # no need to preceed for extracting forms and submitting them
            print("[+] SQL Injection vulnerability detected, link:", new_url)
            messagebox.showinfo("Detected", "[+] SQL Injection vulnerability detected, link: "+ new_url, parent=top)
            return
    # test on HTML forms
    forms = s_get_all_forms(url)
    print(f"[+] Detected {len(forms)} forms on {url}.")
    if (len(forms)==0):
        messagebox.showinfo("Detected", "[+] Detected "+ str(len(forms))+"forms on "+url, parent=top)
    for form in forms:
        form_details = s_get_form_details(form)
        for c in "\"'":
            # the data body we want to submit
            data = {}
            for input_tag in form_details["inputs"]:
                if input_tag["type"] == "hidden" or input_tag["value"]:
                    # any input form that is hidden or has some value,
                    # just use it in the form body
                    try:
                        data[input_tag["name"]] = input_tag["value"] + c
                    except:
                        pass
                elif input_tag["type"] != "submit":
                    # all others except submit, use some junk data with special character
                    data[input_tag["name"]] = f"test{c}"
            # join the url with the action (form request URL)
            url = urljoin(url, form_details["action"])
            if form_details["method"] == "post":
                res = s.post(url, data=data)
            elif form_details["method"] == "get":
                res = s.get(url, params=data)
            # test whether the resulting page is vulnerable
            if s_is_vulnerable(res):
                print("[+] SQL Injection vulnerability detected, link:", url)
                print("[+] Form:")
                pprint(form_details)
                messagebox.showinfo("Detected", "[+] Detected "+ str(len(forms))+"forms on "+url+"\n[+] SQL Injection vulnerability detected, link: "+url+"\n[+] Form:\n"+str(form_details), parent=top)
                break
        
root=Tk()
# Background Image
bg = PhotoImage(file="image/wel.png")
bg_login = PhotoImage(file="image/attack.png")
bg_xss = PhotoImage(file="image/attack.png")
bg_image = Label(root, image=bg).place(x=0, y=0, relwidth=1, relheight=1)

# Welcome widget

#title = Label(root, text="Welcome!!!", font=("Copperplate Gothic Bold", 32, "bold"), fg="#0b0c17",bg="light yellow").place(x=450, y=50)

# XSS button
XSS_btn = Button(root,cursor="hand2",command=XSS,text="Cross-Site Scripting", fg="white", bg="#8fc7b5",font=("Book Antiqua", 18)).place(x=125, y=275, width=220, height=40)

# SQL injection button
SQL_btn = Button(root, cursor="hand2", command=SQL, text="SQL Injection", fg="white", bg="#8fc7b5",font=("Book Antiqua", 18)).place(x=125, y=200, width=220, height=40)


root.title("Vulnerability Scanner")
root.geometry("1199x600+100+50")
root.resizable(False, False)
root.mainloop()